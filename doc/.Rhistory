knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figs/',
echo=T, warning=FALSE, message=FALSE)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(ggplot2)
library(shiny)
url <- "/Users/jasoncho/Documents/GitHub/ads-fall2023-project2-group6/data/MajorDisaster_data.csv"
major_disaster_data <- read.csv(url)
url <- "/Users/jasoncho/Documents/GitHub/ads-fall2023-project2-group6/data/MajorDisaster_data.csv"
major_disaster_data <- read.csv("/Users/mannyb/Documents/GitHub/ads-fall2023-project2-group6/data/MajorDisaster_data.csv")
#head(major_disaster_data)
unique(major_disaster_data$incidentType)
# declarationDate -> Date format
major_disaster_data$declarationDate <- as.Date(major_disaster_data$declarationDate, format="%Y-%m-%d")
# Extracting Year and Month
major_disaster_data$Year <- as.numeric(format(major_disaster_data$declarationDate, "%Y"))
major_disaster_data$Month <- as.numeric(format(major_disaster_data$declarationDate, "%m"))
View(major_disaster_data)
state_data <- df %>%
group_by(state, declarationDate)
state_data <- df %>%
group_by(state, declarationDate) %>%
summarise(count=n())
typeof(major_disaster_data)
class(major_disaster_data)
state_data <- major_disaster_data %>%
group_by(state, declarationDate) %>%
summarise(count=n())
View(state_data)
state_data <- major_disaster_data %>%
group_by(state, declarationDate)
View(state_data)
state_data <- major_disaster_data %>%
group_by(disasterNumber, state, declarationDate) %>%
summarise(Year)
View(state_data)
state_data <- major_disaster_data %>%
group_by(disasterNumber, state, declarationDate) %>%
summarise(Year, Month)
View(state_data)
state_data <- major_disaster_data %>%
group_by(disasterNumber) %>%
summarise(state, Year, Month)
unique(major_disaster_data$disasterNumber)
typeof(major_disaster_data$disasterNumber)
count(unique(major_disaster_data$disasterNumber))
length(major_disaster_data$disasterNumber)
length(unique(major_disaster_data$disasterNumber))
state_data <- major_disaster_data %>%
distinct(disasterNumber) %>%
summarise(state, Year, Month)
state_data <- major_disaster_data %>%
distinct(disasterNumber)
state_data <- major_disaster_data %>%
distinct(disasterNumber) %>%
select(state)
state_data <- major_disaster_data %>%
select(state, declarationDate, Year, Month, disasterNumber) %>%
distinct(disasterNumber, .keep_all = TRUE)
# UI
ui <- fluidPage(
titlePanel("Major Disaster Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("disasterType", "Select Disaster Type:",
choices = c("All", unique(major_disaster_data$incidentType)),
selected = "All"),
radioButtons("analysisType", "Choose Analysis Type:",
choices = c("Yearly Analysis", "Seasonal Analysis"),
selected = "Yearly Analysis"),
conditionalPanel(
condition = "input.analysisType == 'Seasonal Analysis'",
sliderInput("yearSlider", "Select Year:",
min = min(major_disaster_data$Year),
max = max(major_disaster_data$Year),
value = max(major_disaster_data$Year),
step = 1,
round = TRUE)
)
),
mainPanel(
plotOutput("disasterPlot")
)
)
)
# SERVER
server <- function(input, output) {
output$disasterPlot <- renderPlot({
filtered_data <- major_disaster_data
if (input$disasterType != "All") {
filtered_data <- filtered_data %>% filter(incidentType == input$disasterType)
}
if (input$analysisType == "Yearly Analysis") {
yearly_data <- filtered_data %>% group_by(Year) %>% summarise(Count = n())
ggplot(yearly_data, aes(x=Year, y=Count)) + geom_line() + labs(title=paste("Yearly", input$disasterType, "Declarations"))
} else {
monthly_data <- filtered_data %>%
filter(Year == input$yearSlider) %>%
group_by(Month) %>%
summarise(Count = n())
ggplot(monthly_data, aes(x=Month, y=Count)) + geom_bar(stat="identity") +
labs(title=paste("Monthly", input$disasterType, "Declarations for", input$yearSlider))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
state_data <- major_disaster_data %>%
select(state, declarationDate, Year, Month, disasterNumber, incidentType) %>%
distinct(disasterNumber, .keep_all = TRUE)
j = (1,2,3)
j = c(1,2,3)
if(j != 5){
print("T")
}
if (5 !%in% j):
if (!(5 %in% j)): print("hi")
if (!(5 %in% j)){
print("hi")
}
state_data <- major_disaster_data %>%
select(state, declarationDate, Year, Month, disasterNumber, incidentType) %>%
distinct(disasterNumber, .keep_all = TRUE)
states <- unique(state_data$state)
incident <- unique(state_data$incidentType)
c(states = incident)
c(states = c(incident))
l = c(states = c(incident))
l = c(states = c(incident=0))
c(states = c(incident=0))
setNames(lapply(states, function(k) setNames(rep(0, length(incident)), unlist(incident))), unlist(states))
l = setNames(lapply(states, function(k) setNames(rep(0, length(incident)), unlist(incident))), unlist(states))
l$ND
l$ND['Flood']
l['ND','Flood']
l[['ND','Flood']]
typeof(l)
states <- unique(state_data$state)
incident <- unique(state_data$incidentType)
for (i in states){
temp_data <- state_data %>%
filter(state==i)
for (j in incidentType){
if ((j %in% temp_data$incidentType)){
dates <- temp_data %>%
filter(incidentType = j) %>%
select(declarationDate)
}
}
}
state_data <- major_disaster_data %>%
select(state, declarationDate, Year, Month, disasterNumber, incidentType) %>%
distinct(disasterNumber, .keep_all = TRUE)
View(temp_data)
temp_data$incidentType
states <- unique(state_data$state)
incident <- unique(state_data$incidentType)
for (i in states){
temp_data <- state_data %>%
filter(state==i)
for (j in incidentType){
if ((j %in% temp_data$incidentType)){
dates <- temp_data %>%
filter(incidentType == j) %>%
select(declarationDate)
}
}
}
temp_data %>%
filter(incidentType == j)
temp_data %>%
filter(incidentType == "Flood")
if (("Flood" %in% temp_data$incidentType)){
dates <- temp_data %>%
filter(incidentType == j) %>%
select(declarationDate)
}
dates
if (("Flood" in temp_data$incidentType)){
67 %in% c(2,5,8,23,67,34)
"Flood" %in% temp_data$incidentType
states <- unique(state_data$state)
incident <- unique(state_data$incidentType)
for (i in states){
temp_data <- state_data %>%
filter(state==i)
for (j in incidentType){
if ((j %in% temp_data$incidentType)){
dates <- temp_data %>%
filter(incidentType == j) %>%
select(declarationDate)
}
}
}
